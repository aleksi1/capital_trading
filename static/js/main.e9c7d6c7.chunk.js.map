{"version":3,"sources":["store.ts","Helper/Helper.ts","Components/ProfitChart.tsx","Helper/ChartData.ts","Pages/Trading.tsx","Helper/ParseCsv.ts","Pages/Simulator.tsx","AppRouter.tsx","Components/Theme.tsx","i18n.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["store","configureStore","reducer","roundTo","i","d","negative","digits","n","undefined","multiplicator","Math","pow","parseFloat","toFixed","round","formatNumber","Intl","NumberFormat","format","ProfitChart","props","data","areas","AreaChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","map","area","Area","type","stackId","stroke","fill","pad","getKey","date","getFullYear","getMonth","getDate","Trading","useState","columnNames","setColumnNames","balance","deposits","totalTrades","winningTrades","losingTrades","wins","losses","fees","averageWinPercentage","averageLossPercentage","successRate","accountDetails","setAccountDetails","tableRows","setTableRows","chartData","setChartData","addToAverage","average","value","count","getPrice","name","includes","amount","suffix","style","color","fontWeight","Container","maxWidth","sx","mt","Card","marginBottom","Grid","container","spacing","item","xs","Typography","m","variant","component","verticalAlign","Link","href","Button","marginTop","onChange","event","files","process","target","results","rowValues","currentChartData","removedAttributes","noPercentage","newAccountDetails","forEach","obj","attr","Type","toLowerCase","partialValue","totalValue","Amount","Date","Modified","Percentage","Balance","push","Object","values","key","firstRow","cnames","keys","intervalType","dataArray","newArray","reverse","console","log","v","result","a","parseChartData","Papa","parse","header","skipEmptyLines","complete","accept","display","length","Chip","ml","label","Box","noValidate","autoComplete","TextField","InputProps","readOnly","id","TableContainer","Paper","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","row","border","index","Simulator","initialSettings","initialDeposit","trades","takeProfit","stopLoss","estimatedSuccessRate","settings","setSettings","tableData","setTableData","useEffect","storedSettings","localStorage","getItem","JSON","e","newSettings","setItem","stringify","textDecoration","onClick","newTableData","cumulativeProfits","randomNumber","random","success","previousProfits","change","marginRight","rootPath","AppRouter","exact","path","Theme","children","colorScheme","prefersDarkMode","useMediaQuery","theme","React","createTheme","palette","mode","background","default","components","MuiCssBaseline","styleOverrides","body","scrollbarColor","backgroundColor","borderRadius","minHeight","ThemeProvider","CssBaseline","i18n","use","initReactI18next","init","resources","en","translation","Submit","Close","Title","Language","Reply","Threads","Cancel","Email","Username","Password","Save","Finland","Sweden","Norway","Denmark","Iceland","Home","fi","se","lng","interpolation","escapeValue","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9c7d6c7.chunk.js","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\n\nconst store = configureStore({\n  reducer: {\n  },\n})\n\nexport default store\n\nexport type RootState = ReturnType<typeof store.getState>\n","export const roundTo = (i: number, d: number) => {\n  let negative = false\n  let digits = d\n  let n = i\n  if (digits === undefined) {\n    digits = 0\n  }\n  if (n < 0) {\n    negative = true\n    n *= -1\n  }\n  /* eslint-disable no-restricted-properties */\n  const multiplicator = Math.pow(10, digits)\n  /* eslint-enable no-restricted-properties */\n  n = parseFloat((n * multiplicator).toFixed(11))\n  n = parseFloat((Math.round(n) / multiplicator).toFixed(digits))\n  if (negative) {\n    return parseFloat((n * -1).toFixed(digits))\n  }\n  return n\n}\n\nexport const calculatePercentage = (partialValue: number, totalValue: number) => (100 * partialValue) / totalValue\n\nexport const formatNumber = (n: number) => {\n  const numberFormatter = Intl.NumberFormat('fi-FI')\n  return numberFormatter.format(roundTo(n, 2))\n}\n","import {\n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\n} from 'recharts'\n\nconst ProfitChart = (props: any) => {\n  const { data, areas } = props\n  return (\n    <>\n      <AreaChart\n        width={1180}\n        height={400}\n        data={data}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        {areas.map((area: any) => (\n          <Area\n            key={area.dataKey}\n            type=\"monotone\"\n            dataKey={area.dataKey}\n            stackId={area.stackId}\n            stroke={area.stroke}\n            fill={area.fill}\n          />\n        ))}\n      </AreaChart>\n    </>\n  )\n}\n\nexport default ProfitChart\n","export type IntervalType = 'day' | 'hour'\n\nexport type DataValue = {\n  key: string\n  value: number\n  type: 'sum' | 'latest'\n}\n\nexport type ChartData = {\n  date: Date\n  values: DataValue[]\n}\n\n/**\n  {\n    name: 'Page A',\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n*/\n\nconst pad = (n: number) => (n < 10 ? `0${n}` : n)\n\nconst getKey = (date: Date) => `${pad(date.getFullYear())}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`\n\n/**\n * Sorts chart data by day or hour to correct keys\n * @param intervalType\n * @param dataArray\n * @param array\n * @returns\n */\nexport const parseChartData = (intervalType: IntervalType, dataArray: ChartData[]) => {\n  const newArray: any = []\n  dataArray.reverse()\n  /* dataArray.sort((a, b) => {\n    const c = new Date(a.date)\n    const d = new Date(b.date)\n    return d.valueOf() - c.valueOf()\n  }).reverse() */\n  console.log(dataArray)\n\n  Object.values(dataArray).forEach((chartData) => {\n    if (intervalType === 'day') {\n      const { date } = chartData\n      const key = getKey(date)\n      console.log(`${key} => ${date}`)\n      chartData.values.forEach((v) => {\n        if (!newArray[key]) newArray[key] = []\n        if (!newArray[key][v.key]) newArray[key][v.key] = []\n        /*\n        const newValue = v.value\n        if (v.type === 'sum') {\n          newValue = v.value ?? 0 + parseFloat(newArray[key][v.key] ?? 0)\n        } */\n\n        newArray[key].date = date\n        newArray[key][v.key].push({\n          value: v.value,\n        })\n        // newArray[key][v.key] = newValue\n        // newArray[key].name = key\n        // console.log(`${key} - ${v.key} = ${newValue}`)\n      })\n    }\n  })\n\n  /* newArray.sort((a: any, b: any) => {\n    const ad = new Date(a.date)\n    const bd = new Date(b.date)\n    return ad.valueOf() - bd.valueOf()\n  }) */\n  console.log(newArray)\n\n  const result: any = []\n\n  Object.keys(newArray).forEach((key) => {\n    const value: any = newArray[key]\n    // console.log(chartData)\n    // Get latest balance\n    /* chartData.Balance.sort((a: any, b: any) => {\n      const ad = new Date(a.name)\n      const bd = new Date(b.name)\n      return ad.valueOf() - bd.valueOf()\n    }).reverse() */\n    // console.log(chartData.Balance)\n    // console.log(chartData.Balance[0])\n\n    // Sum all amounts\n    let amount = 0\n    value.Amount.forEach((a: any) => {\n      amount += parseFloat(a.value ?? 0)\n    })\n\n    value.Balance.reverse()\n\n    result.push({\n      name: getKey(value.date),\n      Balance: value.Balance[0].value,\n      Amount: amount,\n    })\n  })\n  console.log(result)\n  return result\n}\n","import {\n  Box, Button, Card, Chip, Grid, Link, TextField,\n} from '@mui/material'\nimport Container from '@mui/material/Container'\nimport Typography from '@mui/material/Typography'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport { useState } from 'react'\nimport { parse } from '../Helper/ParseCsv'\nimport { calculatePercentage, roundTo } from '../Helper/Helper'\nimport ProfitChart from '../Components/ProfitChart'\nimport { parseChartData, ChartData } from '../Helper/ChartData'\nimport { AccountDetails } from '../Types/Trading'\n\nconst Trading = () => {\n  const [columnNames, setColumnNames] = useState([])\n  const [accountDetails, setAccountDetails] = useState<AccountDetails>({\n    type: '',\n    balance: 0,\n    deposits: 0,\n    totalTrades: 0,\n    winningTrades: 0,\n    losingTrades: 0,\n    wins: 0,\n    losses: 0,\n    fees: 0,\n    averageWinPercentage: 0,\n    averageLossPercentage: 0,\n    successRate: 0,\n  })\n  const [tableRows, setTableRows] = useState([])\n  const [chartData, setChartData] = useState([])\n\n  const addToAverage = (average: number, value: number, count: number) => (count === 1 ? value\n    : average + ((value - average) / count))\n\n  const changeHandler = (event: any) => {\n    parse(event.target.files[0], (results: any) => {\n      const rowValues: any = []\n      const currentChartData: ChartData[] = []\n      const removedAttributes = [\n        // 'Id',\n        'Trade Id',\n        'Currency',\n        'Instrument Symbol',\n        'Status',\n        // 'Modified',\n        'Account type',\n        'Commission',\n      ]\n      const noPercentage = [\n        'demo_transfer',\n        'deposit',\n      ]\n\n      const newAccountDetails: AccountDetails = {\n        type: '',\n        balance: 0,\n        deposits: 0,\n        totalTrades: 0,\n        winningTrades: 0,\n        losingTrades: 0,\n        wins: 0,\n        losses: 0,\n        fees: 0,\n        averageWinPercentage: 0,\n        averageLossPercentage: 0,\n        successRate: 0,\n      }\n\n      results.data.forEach((obj: any) => {\n        const d = obj\n        removedAttributes.forEach((attr) => {\n          delete d[attr]\n        })\n        const type = d.Type.toLowerCase()\n        if (type === 'demo_transfer') newAccountDetails.type = 'Demo'\n        if (type === 'deposit') newAccountDetails.type = 'Live'\n\n        const amount = parseFloat(d.Amount)\n        const date = new Date(d.Modified)\n        d.Percentage = !noPercentage.includes(type) ? calculatePercentage(amount, parseFloat(d.Balance)) : ''\n        rowValues.push(Object.values(d))\n        if (type === 'swap') {\n          newAccountDetails.fees += amount\n        }\n        if (type === 'trade') {\n          newAccountDetails.totalTrades += 1\n          if (amount >= 0) {\n            newAccountDetails.winningTrades += 1\n            newAccountDetails.wins += amount\n            newAccountDetails.averageWinPercentage = addToAverage(\n              newAccountDetails.averageWinPercentage, d.Percentage, newAccountDetails.winningTrades,\n            )\n          } else {\n            newAccountDetails.losingTrades += 1\n            newAccountDetails.losses += amount\n            newAccountDetails.averageLossPercentage = addToAverage(\n              newAccountDetails.averageLossPercentage, d.Percentage, newAccountDetails.losingTrades,\n            )\n          }\n        } else if (noPercentage.includes(type)) {\n          newAccountDetails.deposits += amount\n        }\n\n        currentChartData.push({\n          date,\n          values: [\n            {\n              key: 'Amount',\n              value: amount,\n              type: 'sum',\n            },\n            {\n              key: 'Balance',\n              value: d.Balance,\n              type: 'latest',\n            },\n          ],\n        })\n      })\n      const firstRow: any = results.data[0]\n      const cnames: any = Object.keys(firstRow)\n      setColumnNames(cnames)\n      setTableRows(rowValues)\n      newAccountDetails.balance = results.data[0].Balance\n      newAccountDetails.successRate = (newAccountDetails.winningTrades / newAccountDetails.totalTrades) * 100\n      setAccountDetails(newAccountDetails)\n      setChartData(parseChartData('day', currentChartData))\n    })\n  }\n\n  const getPrice = (value: any, name: string) => {\n    const allowedFields = ['Amount', 'Balance', 'Percentage']\n    if (!allowedFields.includes(name) || value === '') return <>{value}</>\n    const amount = roundTo(parseFloat(value), 2)\n    const suffix = name === 'Percentage' ? '%' : ' €'\n    if (name === 'Balance') {\n      return <div style={{ color: '#1a75ff', fontWeight: 'bold' }}>{`${amount}${suffix}`}</div>\n    }\n    if (amount >= 0) {\n      return <div style={{ color: 'lightgreen', fontWeight: 'bold' }}>{`${amount}${suffix}`}</div>\n    }\n    return <div style={{ color: 'red', fontWeight: 'bold' }}>{`${amount}${suffix}`}</div>\n  }\n\n  const areas = [\n    /* {\n      dataKey: 'amount',\n      stackId: '1',\n      stroke: '#8884d8',\n      fill: '#8884d8',\n    }, */\n    {\n      dataKey: 'Balance',\n      stackId: '1',\n      stroke: '#1a75ff',\n      fill: '#1a75ff',\n    },\n  ]\n\n  return (\n    <>\n      <Container maxWidth=\"lg\" sx={{ mt: 10 }}>\n        <Card sx={{ marginBottom: '10px', maxWidth: '100%' }}>\n\n          <Grid container spacing={2}>\n            <Grid item xs={8}>\n              <Typography sx={{ m: 2 }} variant=\"h5\" component=\"div\">\n                <ShowChartIcon sx={{ verticalAlign: 'middle' }} />\n                {' Trading'}\n              </Typography>\n            </Grid>\n            <Grid item xs={2} sx={{ mt: 3 }}>\n              <Link href=\"/simulator\">Simulator</Link>\n            </Grid>\n            <Grid item xs={2}>\n              {' '}\n              <Button\n                variant=\"contained\"\n                component=\"label\"\n                style={{ marginTop: '15px' }}\n              >\n                Upload File\n                <input\n                  type=\"file\"\n                  name=\"file\"\n                  onChange={changeHandler}\n                  accept=\".csv\"\n                  style={{ display: 'none' }}\n                />\n              </Button>\n            </Grid>\n          </Grid>\n\n        </Card>\n\n        {chartData.length > 0 ? <ProfitChart data={chartData} areas={areas} /> : ''}\n\n        <Card sx={{ marginBottom: '10px', maxWidth: '100%' }}>\n          <Typography sx={{ m: 2 }} variant=\"h5\" component=\"div\">\n            Account details\n            {accountDetails.type ? <Chip sx={{ ml: 2 }} color=\"info\" label={accountDetails.type} /> : ''}\n          </Typography>\n          <Box\n            component=\"form\"\n            sx={{\n              '& .MuiTextField-root': { m: 1, width: '25ch' },\n            }}\n            noValidate\n            autoComplete=\"off\"\n          >\n            <div>\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Balance\"\n                value={` ${roundTo(accountDetails?.balance, 2)} € `}\n              />\n\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Wins\"\n                value={` ${accountDetails?.winningTrades} (${roundTo(accountDetails?.wins, 2)} €) `}\n              />\n\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Losses\"\n                value={` ${accountDetails?.losingTrades} (${roundTo(accountDetails?.losses, 2)} €)`}\n              />\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Deposits\"\n                value={` ${roundTo(accountDetails?.deposits, 2)} €`}\n              />\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Average win %\"\n                value={` ${roundTo(accountDetails?.averageWinPercentage, 2)} %`}\n              />\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Average loss %\"\n                value={` ${roundTo(accountDetails?.averageLossPercentage, 2)} %`}\n              />\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Success rate %\"\n                value={` ${roundTo(accountDetails?.successRate, 2)} %`}\n              />\n              <TextField\n                InputProps={{\n                  readOnly: true,\n                }}\n                id=\"outlined-disabled\"\n                label=\"Fees\"\n                value={` ${roundTo(accountDetails?.fees, 2) * -1} €`}\n              />\n            </div>\n          </Box>\n\n        </Card>\n\n        <TableContainer component={Paper}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                {columnNames.map((value: any) => {\n                  if (value === 'Id') return ''\n                  return (\n                    <TableCell key={`hc-${value}`} align=\"right\">\n                      {value}\n                    </TableCell>\n                  )\n                })}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {tableRows.map((row: any) => (\n                <TableRow\n                  key={row.name}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  {row.map((value: any, index: number) => {\n                    if (columnNames[index] === 'Id') return ''\n                    return (\n                      <TableCell key={`body-cell-${row[0]}-${columnNames[index]}`} align=\"right\">\n                        {getPrice(value, columnNames[index])}\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Container>\n    </>\n  )\n}\n\nexport default Trading\n","import Papa from 'papaparse'\n\nexport const parse2 = () => {\n  console.log('')\n}\n\nexport const parse = (files: any, process: any) => {\n  Papa.parse(files, {\n    header: true,\n    skipEmptyLines: true,\n    complete(results: any) {\n      process(results)\n    },\n  })\n}\n","import {\n  Box, Button, Card, Chip, Grid, Link, TextField, Typography,\n} from '@mui/material'\nimport Container from '@mui/material/Container'\nimport { ChangeEvent, useEffect, useState } from 'react'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport { formatNumber } from '../Helper/Helper'\n\nconst Simulator = () => {\n  const initialSettings = {\n    initialDeposit: 1000,\n    trades: 20,\n    takeProfit: 5,\n    stopLoss: 2,\n    estimatedSuccessRate: 60,\n  }\n  const [settings, setSettings] = useState(initialSettings)\n  const [tableData, setTableData] = useState([])\n\n  useEffect(() => {\n    const storedSettings = localStorage.getItem('settings')\n    if (storedSettings) {\n      const obj = { ...initialSettings, ...JSON.parse(storedSettings) }\n      setSettings(obj)\n    }\n  }, [])\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newSettings = { ...settings, [e.target.name]: e.target.value }\n    localStorage.setItem('settings', JSON.stringify(newSettings))\n    setSettings(newSettings)\n  }\n\n  const onClick = () => {\n    const newTableData: any = []\n    let cumulativeProfits = settings.initialDeposit\n    for (let i = 0; i < settings.trades; i += 1) {\n      const randomNumber = Math.random() * 100\n      const success = randomNumber <= settings.estimatedSuccessRate\n      const previousProfits = cumulativeProfits\n      if (success) {\n        cumulativeProfits *= (1 + (settings.takeProfit / 100))\n      } else {\n        cumulativeProfits *= (1 - (settings.stopLoss / 100))\n      }\n      newTableData.push({\n        randomNumber,\n        success,\n        change: `${formatNumber(cumulativeProfits - previousProfits)} €`,\n        amount: `${formatNumber(cumulativeProfits)} €`,\n        index: i + 1,\n      })\n    }\n    setTableData(newTableData.reverse())\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"lg\" sx={{ mt: 10 }}>\n        <Card sx={{ marginBottom: '10px', maxWidth: '100%' }}>\n          <Grid container spacing={2}>\n            <Grid item xs={10}>\n              <Typography sx={{ m: 2 }} variant=\"h5\" component=\"div\">\n                <ShowChartIcon sx={{ verticalAlign: 'middle' }} />\n                <Link href=\"/\" style={{ textDecoration: 'none' }}>{' Trading'}</Link>\n                {' / Simulator'}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Card>\n        <Box\n          component=\"form\"\n          sx={{\n            '& .MuiTextField-root': { m: 1, width: '25ch' },\n          }}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <div>\n            <TextField\n              id=\"outlined-disabled\"\n              label=\"Initial deposit\"\n              name=\"initialDeposit\"\n              value={settings.initialDeposit}\n              onChange={onChange}\n            />\n            <TextField\n              id=\"outlined-disabled\"\n              label=\"Trades\"\n              name=\"trades\"\n              value={settings.trades}\n              onChange={onChange}\n            />\n            <TextField\n              id=\"outlined-disabled\"\n              label=\"Take profit\"\n              name=\"takeProfit\"\n              value={settings.takeProfit}\n              onChange={onChange}\n            />\n            <TextField\n              id=\"outlined-disabled\"\n              label=\"Stop loss\"\n              name=\"stopLoss\"\n              value={settings.stopLoss}\n              onChange={onChange}\n            />\n            <TextField\n              id=\"outlined-disabled\"\n              label=\"Estimated success rate\"\n              name=\"estimatedSuccessRate\"\n              value={settings.estimatedSuccessRate}\n              onChange={onChange}\n            />\n            <Button\n              variant=\"contained\"\n              component=\"label\"\n              style={{ marginTop: '15px' }}\n              onClick={onClick}\n            >\n              Simulate\n            </Button>\n          </div>\n        </Box>\n        {tableData.map((value: any) => (\n          <Card sx={{ margin: '10px 0', maxWidth: '100%' }}>\n            <Grid container spacing={2}>\n              <Grid item style={{ marginRight: '5px' }}>\n                <Chip color=\"info\" label={value.index} />\n              </Grid>\n              <Grid item xs={1}>\n                {value.success\n                  ? <Chip color=\"success\" label={value.change} />\n                  : <Chip color=\"error\" label={value.change} /> }\n              </Grid>\n              <Grid item xs={2}>\n                {value.amount}\n              </Grid>\n            </Grid>\n          </Card>\n        ))}\n      </Container>\n    </>\n  )\n}\n\nexport default Simulator\n","import {\n  BrowserRouter, Route, Switch,\n} from 'react-router-dom'\nimport Trading from './Pages/Trading'\nimport Simulator from './Pages/Simulator'\n\nconst rootPath = 'capital_trading'\n\nconst AppRouter = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path={`${rootPath}/`} component={Trading} />\n      <Route exact path={`${rootPath}/simulator`} component={Simulator} />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default AppRouter\n","import * as React from 'react'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\nimport CssBaseline from '@mui/material/CssBaseline'\n\nconst Theme = (props: any) => {\n  const { children } = props\n  const colorScheme = localStorage.getItem('colorScheme')\n  const prefersDarkMode = useMediaQuery(`(prefers-color-scheme: ${colorScheme})`)\n  const theme = React.useMemo(\n    () => createTheme({\n      palette: {\n        mode: prefersDarkMode ? 'dark' : 'light',\n        background: {\n          default: prefersDarkMode ? '#121212' : '#f2efef',\n        },\n      },\n\n      components: {\n        MuiCssBaseline: {\n          styleOverrides: {\n            /** TODO: implement light version */\n            body: {\n              scrollbarColor: '#6b6b6b #2b2b2b',\n              '&::-webkit-scrollbar, & *::-webkit-scrollbar': {\n                backgroundColor: '#2b2b2b',\n              },\n              '&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb': {\n                borderRadius: 8,\n                backgroundColor: '#6b6b6b',\n                minHeight: 24,\n                border: '3px solid #2b2b2b',\n              },\n              '&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus': {\n                backgroundColor: '#959595',\n              },\n              '&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active': {\n                backgroundColor: '#959595',\n              },\n              '&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover': {\n                backgroundColor: '#959595',\n              },\n              '&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner': {\n                backgroundColor: '#2b2b2b',\n              },\n            },\n          },\n        },\n      },\n\n    }),\n    [prefersDarkMode],\n  )\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline>\n        {children}\n      </CssBaseline>\n    </ThemeProvider>\n  )\n}\n\nexport default Theme\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n// the translations\n// (tip move them in a JSON file and import them,\n// or even better, manage them separated from your code: https://react.i18next.com/guides/multiple-translation-files)\nconst resources = {\n  en: {\n    translation: {\n      'New thread': 'New thread',\n      Submit: 'Submit',\n      Close: 'Close',\n      Title: 'Title',\n      'Search forums': 'Search forums',\n      Language: 'Language',\n      Reply: 'Reply',\n      Threads: 'Threads',\n      'Dark / light mode': 'Dark / light mode',\n      'My settings': 'My settings',\n      'Sign out': 'Sign out',\n      Cancel: 'Cancel',\n      'Sign in': 'Sign in',\n      Email: 'Email',\n      Username: 'Username',\n      Password: 'Password',\n      'Page you are looking for does not exist.': 'Page you are looking for does not exist.',\n      Save: 'Save',\n      'Username is shown to other users.': 'Username is shown to other users.',\n      'Email verification will be sent to activate new email.': 'Email verification will be sent to activate new email.',\n      'Show my online status to other users.': 'Show my online status to other users.',\n      'Sign in is allowed from selected countries': 'Sign in is allowed from selected countries',\n      Finland: 'Finland',\n      Sweden: 'Sweden',\n      Norway: 'Norway',\n      Denmark: 'Denmark',\n      Iceland: 'Iceland',\n      Home: 'Home',\n    },\n  },\n  fi: {\n    translation: {\n      'New thread': 'Uusi aihe',\n      Submit: 'Lähetä',\n      Close: 'Sulje',\n      Title: 'Otsikko',\n      'Search forums': 'Hae foorumilta',\n      Language: 'Kieli',\n      Reply: 'Vastaa',\n      Threads: 'Aiheet',\n      'Dark / light mode': 'Tumma- / vaalea-tila',\n      'My settings': 'Asetukset',\n      'Sign out': 'Kirjaudu ulos',\n      Cancel: 'Peruuta',\n      'Sign in': 'Kirjaudu sisään',\n      Email: 'Sähköposti',\n      Username: 'Käyttäjätunnus',\n      Password: 'Salasana',\n      'Page you are looking for does not exist.': 'Etsimääsi sivua ei ole olemassa.',\n      Save: 'Tallenna',\n      'Username is shown to other users.': 'Käyttäjätunnus näkyy muille käyttäjille.',\n      'Email verification will be sent to activate new email.': 'Sähköpostivarmennus lähetetään uuden sähköpostin aktivoimiseksi.',\n      'Show my online status to other users.': 'Näytä paikalla-tilani muille käyttäjille.',\n      'Sign in is allowed from selected countries': 'Kirjautuminen on sallittu valituista maista',\n      Finland: 'Suomi',\n      Sweden: 'Ruotsi',\n      Norway: 'Norja',\n      Denmark: 'Tanska',\n      Iceland: 'Islanti',\n      Home: 'Etusivu',\n    },\n  },\n  se: {\n    translation: {\n      'New thread': 'Ny tråd',\n      Submit: 'Submit',\n      Close: 'Stäng',\n      Title: 'Titel',\n      'Search forums': 'Sök i forum',\n      Language: 'Språk',\n      Reply: 'Svar',\n      Threads: 'Trådar',\n      'Dark / light mode': 'Mörkt / ljust läge',\n      'My settings': 'Mina inställningar',\n      'Sign out': 'Logga ut',\n      Cancel: 'Avbryt',\n      'Sign in': 'Logga in',\n      Email: 'E-post',\n      Username: 'Användarnamn',\n      Password: 'Lösenord',\n      'Page you are looking for does not exist.': 'Sidan du söker finns inte.',\n      Save: 'Spara',\n      'Username is shown to other users.': 'Användarnamn visas för andra användare',\n      'Email verification will be sent to activate new email.': 'E-postbekräftelse kommer att skickas för att aktivera ny e-post.',\n      'Show my online status to other users.': 'Visa min online-status för andra användare.',\n      'Sign in is allowed from selected countries': 'Det är tillåtet att logga in från utvalda länder',\n      Finland: 'Finland',\n      Sweden: 'Sverige',\n      Norway: 'Norge',\n      Denmark: 'Danmark',\n      Iceland: 'Island',\n    },\n  },\n}\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: localStorage.getItem('language') ?? 'fi',\n    // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\n    // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\n    // if you're using a language detector, do not define the lng option\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  })\nexport default i18n\n","import { Provider } from 'react-redux'\nimport store from './store'\nimport AppRouter from './AppRouter'\nimport Theme from './Components/Theme'\nimport './i18n'\n\nconst App = () => (\n  <Provider store={store}>\n    <div className=\"App\">\n      <Theme>\n        <AppRouter />\n      </Theme>\n    </div>\n  </Provider>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}